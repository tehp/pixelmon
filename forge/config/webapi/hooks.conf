# The endpoints here get called when executing the specified command. For example the hook "test" would get executed
# when running the command /webapi notify test
command {
    test {
        # The aliases this command can be called with.
        # THESE ARE NOT PREFIXED WITH "/webapi notify", BE CAREFUL NOT TO OVERRIDE OTHER COMMANDS! (unless you want to)
        aliases=[
            test
        ]
        # If set to false this disables the complete command hook and also doesn't
        # register the command in the command registry
        enabled=false
        # The list of hooks that is called when this command is executed
        # The same kind of hooks as in the events can be used, with the params as {param} in the URL or headers.
        hooks=[
            {
                # This is the address of the endpoint.
                address="http://localhost/test/{player}"
                # Choose to either send the data as:
                # JSON = application/json
                # XML = application/xml
                dataType=JSON
                # Set to true to send detailed json data
                details=true
                # Set to true or omit to enable the endpoint.
                enabled=false
                # Choose to send the data wrapped as application/x-www-form-urlencoded
                form=false
                # This is a list of additional headers that is sent to the server. You can use this to e.g. specify a secret
                # key which ensures that the server knows the requests are coming from the Web-API.
                # Please note that the following headers will always be overridden by the Web-API:
                # X-WebAPI-Version, X-WebAPI-Event, X-WebAPI-Source, User-Agent, Content-Type, Content-Length, accept, charset
                headers=[
                    {
                        name=X-SUPER-SECRET
                        value="my_secret_to_verify"
                    }
                ]
                # This is the http method that is used (GET, PUT, POST or DELETE)
                method=POST
                # Permissions node same as the ones in the permissions.conf file,
                # use to configure which data is sent to this node
                permissions {
                    "*"=true
                }
            }
        ]
        # Here you have to specify what parameters are used.
        # These parameters must be included when running the command. So the example command below would have to be
        # run using the following syntax: /webapi notify test {player} {world}
        # 
        # The body automatically contains all the parameters that are listed here. The parameters are expected to
        # show up in this order when calling the command. There is a special parameter 'source' which is always
        # included and contains the identifier of the one who ran the command (e.g. UUID of the player).
        # Possible parameter types are: STRING, BOOL, INTEGER, DOUBLE, PLAYER, WORLD, LOCATION, VECTOR3D, VECTOR3I.
        # Parameters can be marked as optional, and if set to true will be wrapped in an optional arguments.
        params=[
            {
                name=player
                optional=false
                type=PLAYER
            },
            {
                name=world
                optional=true
                type=WORLD
            }
        ]
    }
}
# These hooks can be used to bind to custom events. You have to use the fully qualified class name as the key, and then
# a hook list just like for the event hooks. These hooks work just like the event hooks, although the data
# depends on the event you subscribe to.
custom {}
# The following are event hooks which are all called when the specified event happens. They get passed various data
# in the body (if method != GET, described below for each event). The format of the hooks is described in the "all"
# event hook. This format can be used for any of the hook lists.
# Please note that the hooks don't get called in any particular order, and might even be called concurrently.
events {
    # This event is fired when a player earns an achievement / advancement
    achievement=[]
    # This event is fired for all events. The "X-WebAPI-Event" header specifies the exact event.
    all=[
        {
            # This is the address of the endpoint.
            address="http://localhost/test"
            # Choose to either send the data as:
            # JSON = application/json
            # XML = application/xml
            dataType=JSON
            # Set to true to send detailed json data
            details=true
            # Set to true or omit to enable the endpoint.
            enabled=false
            # Choose to send the data wrapped as application/x-www-form-urlencoded
            form=false
            # This is a list of additional headers that is sent to the server. You can use this to e.g. specify a secret
            # key which ensures that the server knows the requests are coming from the Web-API.
            # Please note that the following headers will always be overridden by the Web-API:
            # X-WebAPI-Version, X-WebAPI-Event, X-WebAPI-Source, User-Agent, Content-Type, Content-Length, accept, charset
            headers=[
                {
                    name=X-SUPER-SECRET
                    value="my_secret_to_verify"
                }
            ]
            # This is the http method that is used (GET, PUT, POST or DELETE)
            method=POST
            # Permissions node same as the ones in the permissions.conf file,
            # use to configure which data is sent to this node
            permissions {
                "*"=true
            }
        }
    ]
    # This event is fired when a block operation changes status
    "block_operation_status"=[]
    # This event is fired when a chat message is sent on the server
    chat=[]
    # This event is fired when a command is executed
    command=[]
    # This event is fired when an entity despawns
    "entity_despawn"=[]
    # This event is fired when an entity expires
    "entity_expire"=[]
    # This event is fired when an entity spawns
    "entity_spawn"=[]
    # This event is fired when an explosion occurs
    explosion=[]
    # This event is fired when a chunk is generated
    "generate_chunk"=[]
    # This event is fired when a player interacts with a block
    "interact_block"=[]
    # This event is fired when a player clicks one of the options of an interactive message
    "interactive_message"=[]
    # This event is fired when an inventory is closed
    "inventory_close"=[]
    # This event is fired when an inventory is opened
    "inventory_open"=[]
    # This event is fired when a player gets banned
    "player_ban"=[]
    # This event is fired when a player dies
    "player_death"=[]
    # This event is fired when a player joins the server
    "player_join"=[]
    # This event is fired when a player gets kicked
    "player_kick"=[]
    # This event is fired when a player leaves the server
    "player_leave"=[]
    # This event is fired when the server starts
    "server_start"=[]
    # This event is fired when the server stops
    "server_stop"=[]
    # This event is fired when a world is loaded
    "world_load"=[]
    # This event is fired when the world is saved
    "world_save"=[]
    # This event is fired when a world is unloaded
    "world_unload"=[]
}
